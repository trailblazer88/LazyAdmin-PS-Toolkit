using namespace System.Windows.Forms
using namespace System.Drawing

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

$form = New-Object Form
$form.Text = "AD Lockout Trace"
$form.Size = New-Object Size(1000,650)
$form.StartPosition = "CenterScreen"
$form.Font = New-Object Font("Segoe UI",10)
$form.MinimumSize = $form.Size

# Input Controls
$lblUser = New-Object Label Text:"Username:" Location:(New-Object Point(10,15)) AutoSize:$true
$form.Controls.Add($lblUser)
$txtUser = New-Object TextBox Location:(New-Object Point(85,12)) Size:(New-Object Size(180,25))
$form.Controls.Add($txtUser)

$lblDomain = New-Object Label Text:"Domain:" Location:(New-Object Point(280,15)) AutoSize:$true
$form.Controls.Add($lblDomain)
$cmbDomain = New-Object ComboBox Location:(New-Object Point(340,12)) Size:(New-Object Size(180,25))
$cmbDomain.DropDownStyle='DropDownList'
$form.Controls.Add($cmbDomain)

$lblFrom = New-Object Label Text:"From:" Location:(New-Object Point(530,15)) AutoSize:$true
$form.Controls.Add($lblFrom)
$dtFrom = New-Object DateTimePicker Location:(New-Object Point(580,12)) Size:(New-Object Size(160,25))
$dtFrom.Format='Custom'; $dtFrom.CustomFormat='yyyy-MM-dd HH:mm:ss'; $dtFrom.ShowUpDown=$true
$dtFrom.Value = (Get-Date).AddDays(-1)
$form.Controls.Add($dtFrom)

$lblTo=New-Object Label Text:"To:" Location:(New-Object Point(750,15)) AutoSize:$true
$form.Controls.Add($lblTo)
$dtTo = New-Object DateTimePicker Location:(New-Object Point(780,12)) Size:(New-Object Size(160,25))
$dtTo.Format='Custom'; $dtTo.CustomFormat='yyyy-MM-dd HH:mm:ss'; $dtTo.ShowUpDown=$true
$dtTo.Value = Get-Date
$form.Controls.Add($dtTo)

$btnRun=New-Object Button Text:"Run Trace" Location:(New-Object Point(950,12)) Size:(New-Object Size(90,30))
$form.Controls.Add($btnRun)

# Status ListView for DCs
$lvDC = New-Object ListView View:'Details' FullRowSelect:$true GridLines:$true Location:(New-Object Point(10,60)) Size:(New-Object Size(480,450))
$lvDC.Columns.Add("DC",200)|Out-Null
$lvDC.Columns.Add("Status",260)|Out-Null
$form.Controls.Add($lvDC)

# Results ListView
$lvEvt = New-Object ListView View:'Details' FullRowSelect:$true GridLines:$true Location:(New-Object Point(500,60)) Size:(New-Object Size(480,450))
"DC","Caller","Time","EventID","Reason" | ForEach-Object { $lvEvt.Columns.Add($_,100)|Out-Null }
$form.Controls.Add($lvEvt)

# Export
$btnExport=New-Object Button Text:"Export CSV" Location:(New-Object Point(10,520)) Size:(New-Object Size(100,30))
$btnExport.Enabled=$false
$form.Controls.Add($btnExport)

# ProgressBar
$progress = New-Object ProgressBar Location:(New-Object Point(120,520)) Size:(New-Object Size(860,30))
$form.Controls.Add($progress)

$statusStrip=New-Object StatusStrip
$statusStrip.Dock='Bottom'
$form.Controls.Add($statusStrip)
$statusLabel=New-Object ToolStripStatusLabel Text:"Ready"
$statusStrip.Items.Add($statusLabel)

# Load domains
try {
  $forest=[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
  $cmbDomain.Items.AddRange(($forest.Domains | ForEach-Object {$_.Name}))
  if($cmbDomain.Items.Count){$cmbDomain.SelectedIndex=0}
} catch {
  [MessageBox]::Show("Failed domain load: $_","Error",[MessageBoxButtons]::OK,[MessageBoxIcon]::Error)
}

# Runspace Setup
$pool=[runspacefactory]::CreateRunspacePool(1,[environment]::ProcessorCount)
$pool.Open()

$btnRun.Add_Click({
  $user=$txtUser.Text.Trim(); $domain=$cmbDomain.SelectedItem
  $from=$dtFrom.Value; $to=$dtTo.Value
  if(-not $user){[MessageBox]::Show("Enter username.");return}
  if(-not $domain){[MessageBox]::Show("Select domain.");return}
  if($from -gt $to){[MessageBox]::Show("'From' must be <= 'To'.");return}

  $lvDC.Items.Clear(); $lvEvt.Items.Clear()
  $progress.Value=0; $progress.Style='Continuous'; $statusLabel.Text="Starting..."
  $btnRun.Enabled=$false; $btnExport.Enabled=$false

  $scriptBlock={
    param($user,$domain,$from,$to)
    $forest=[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $domainObj=$forest.Domains | Where{$_.Name -ieq $domain}
    if(-not $domainObj){throw "Domain not found: $domain"}
    $tot=$domainObj.DomainControllers.Count
    $i=0; $res=@()

    foreach($dc in $domainObj.DomainControllers){
      $i++; Write-Host "DC=$($dc.Name);Index=$i"  
      $logs=Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
        LogName='Security'; ID=4740,4625,4771,4776; StartTime=$from; EndTime=$to
      } -ErrorAction Stop

      foreach($log in $logs){
        $xml=[xml]$log.ToXml()
        $target=($xml.Event.EventData.Data | Where Name -eq "TargetUserName").'#text'
        if($target -ieq $user){
          $caller=($xml.Event.EventData.Data | Where Name -match "CallerComputerName|WorkstationName").'#text'
          $res+=[pscustomobject]@{ DC=$dc.Name; Caller=$caller; Time=$log.TimeCreated; EventID=$log.Id; Reason=$(
              switch($log.Id){4740{"Lockout"}4625{"Fail"}4771{"Kerberos"}4776{"NTLM"}default{"Other"}}) }
        }
      }
      [pscustomobject]@{ DC=$dc.Name; Index=$i; Total=$tot; Status="Done"; Results=$res }
    }
  }

  $ps=[powershell]::Create().AddScript($scriptBlock).AddArgument($user).AddArgument($domain).AddArgument($from).AddArgument($to)
  $ps.RunspacePool=$pool

  $async=$ps.BeginInvoke()
  while(-not $async.IsCompleted){
    Start-Sleep -Milliseconds 200
    [System.Windows.Forms.Application]::DoEvents()
  }
  $out=$ps.EndInvoke($async)
  $ps.Dispose()

  # Process results
  $allResults=@()
  foreach($item in $out){
    $idx=$item.Index; $tot=$item.Total
    [void]$statusLabel.Text=("Processing DC $idx/$tot: $($item.DC)")
    $lvDC.Items.Add(($item.DC).ToString()).SubItems.Add($item.Status)
    $allResults+=$item.Results
    $progress.Value=[math]::Floor(($idx/$tot)*100)
    [System.Windows.Forms.Application]::DoEvents()
  }

  foreach($evt in $allResults){
    $itm=$lvEvt.Items.Add($evt.DC)
    $itm.SubItems.AddRange(@($evt.Caller,$evt.Time.ToString("yyyy-MM-dd HH:mm:ss"),$evt.EventID,$evt.Reason))
  }
  $statusLabel.Text="Completed"
  $btnRun.Enabled=$true
  if($lvEvt.Items.Count){$btnExport.Enabled=$true}
})

$btnExport.Add_Click({
  $dlg=New-Object SaveFileDialog
  $dlg.Filter="CSV (*.csv)|*.csv"
  $dlg.FileName="LockoutTrace_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
  if($dlg.ShowDialog() -eq 'OK'){
    $rows = foreach($item in $lvEvt.Items){
      [pscustomobject]@{DC=$item.SubItems[0].Text; Caller=$item.SubItems[1].Text; Time=$item.SubItems[2].Text; EventID=$item.SubItems[3].Text; Reason=$item.SubItems[4].Text}
    }
    $rows | Export-Csv -Path $dlg.FileName -NoTypeInformation -Encoding UTF8
    [MessageBox]::Show("Exported to `"$($dlg.FileName)`"")
  }
})

$form.Add_Shown({ $form.Activate() })
[void]$form.ShowDialog()

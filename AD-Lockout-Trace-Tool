Add-Type -AssemblyName System.Windows.Forms, System.Drawing

# Create form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Active Directory Lockout Tracer"
$form.Size = New-Object System.Drawing.Size(1040, 720)
$form.StartPosition = "CenterScreen"
$form.BackColor = [System.Drawing.Color]::White
$form.Font = New-Object System.Drawing.Font("Segoe UI", 10)

# Username
$lblUser = New-Object System.Windows.Forms.Label
$lblUser.Text = "Username:"
$lblUser.Location = "20,20"
$lblUser.AutoSize = $true
$form.Controls.Add($lblUser)

$txtUser = New-Object System.Windows.Forms.TextBox
$txtUser.Location = "100,18"
$txtUser.Size = "180,25"
$form.Controls.Add($txtUser)

# Domain
$lblDomain = New-Object System.Windows.Forms.Label
$lblDomain.Text = "Domain:"
$lblDomain.Location = "300,20"
$lblDomain.AutoSize = $true
$form.Controls.Add($lblDomain)

$cmbDomain = New-Object System.Windows.Forms.ComboBox
$cmbDomain.Location = "370,18"
$cmbDomain.Size = "200,25"
$cmbDomain.DropDownStyle = 'DropDownList'
$form.Controls.Add($cmbDomain)

# Date Range
$lblFrom = New-Object System.Windows.Forms.Label
$lblFrom.Text = "From:"
$lblFrom.Location = "600,20"
$form.Controls.Add($lblFrom)

$dtpFrom = New-Object System.Windows.Forms.DateTimePicker
$dtpFrom.Location = "645,18"
$dtpFrom.Size = "120,25"
$dtpFrom.Value = (Get-Date).AddDays(-1)
$form.Controls.Add($dtpFrom)

$lblTo = New-Object System.Windows.Forms.Label
$lblTo.Text = "To:"
$lblTo.Location = "780,20"
$form.Controls.Add($lblTo)

$dtpTo = New-Object System.Windows.Forms.DateTimePicker
$dtpTo.Location = "810,18"
$dtpTo.Size = "120,25"
$dtpTo.Value = Get-Date
$form.Controls.Add($dtpTo)

# Run button
$btnRun = New-Object System.Windows.Forms.Button
$btnRun.Text = "Run Trace"
$btnRun.Location = "940,16"
$btnRun.Size = "80,30"
$btnRun.FlatStyle = 'Flat'
$form.Controls.Add($btnRun)

# Progress bar
$progress = New-Object System.Windows.Forms.ProgressBar
$progress.Location = "20,60"
$progress.Size = "1000,20"
$progress.Style = 'Blocks'
$form.Controls.Add($progress)

# Domain Controller status
$lvDC = New-Object System.Windows.Forms.ListView
$lvDC.View = 'Details'
$lvDC.FullRowSelect = $true
$lvDC.GridLines = $true
$lvDC.Location = "20,90"
$lvDC.Size = "480,250"
$lvDC.Columns.Add("Domain Controller", 200) | Out-Null
$lvDC.Columns.Add("Status", 260) | Out-Null
$form.Controls.Add($lvDC)

# Event results
$lvResults = New-Object System.Windows.Forms.ListView
$lvResults.View = 'Details'
$lvResults.FullRowSelect = $true
$lvResults.GridLines = $true
$lvResults.Location = "520,90"
$lvResults.Size = "500,500"
$lvResults.Columns.Add("DC", 100) | Out-Null
$lvResults.Columns.Add("Caller", 100) | Out-Null
$lvResults.Columns.Add("Time", 120) | Out-Null
$lvResults.Columns.Add("EventID", 60) | Out-Null
$lvResults.Columns.Add("Reason", 120) | Out-Null
$form.Controls.Add($lvResults)

# Export Button
$btnExport = New-Object System.Windows.Forms.Button
$btnExport.Text = "Export CSV"
$btnExport.Location = "20,350"
$btnExport.Size = "100,30"
$btnExport.FlatStyle = 'Flat'
$btnExport.Enabled = $false
$form.Controls.Add($btnExport)

# Populate domains
try {
    $domains = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains | ForEach-Object { $_.Name }
    $cmbDomain.Items.AddRange($domains)
    if ($cmbDomain.Items.Count -gt 0) { $cmbDomain.SelectedIndex = 0 }
} catch {
    [System.Windows.Forms.MessageBox]::Show("Failed to get domain list: $_")
}

# Results store
$global:Results = @()

# Run logic in background
$btnRun.Add_Click({
    $user = $txtUser.Text.Trim()
    $domain = $cmbDomain.SelectedItem
    $from = $dtpFrom.Value
    $to = $dtpTo.Value
    $ids = 4740,4625,4771,4776

    if (-not $user) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a username.")
        return
    }

    $btnRun.Enabled = $false
    $btnExport.Enabled = $false
    $progress.Style = 'Marquee'
    $lvDC.Items.Clear()
    $lvResults.Items.Clear()

    Start-Job -ScriptBlock {
        param($user, $domain, $from, $to, $ids)

        $output = @{
            Events = @()
            DCs = @()
        }

        try {
            $forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
            $targetDomain = $forest.Domains | Where-Object { $_.Name -ieq $domain }
            $dcs = $targetDomain.DomainControllers

            foreach ($dc in $dcs) {
                $status = "Success"
                try {
                    $logs = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                        LogName = 'Security'
                        ID = $ids
                        StartTime = $from
                        EndTime = $to
                    } -ErrorAction Stop

                    foreach ($e in $logs) {
                        $x = [xml]$e.ToXml()
                        $tuser = ($x.Event.EventData.Data | Where-Object { $_.Name -eq 'TargetUserName' }).'#text'
                        if ($tuser -ieq $user) {
                            $caller = ($x.Event.EventData.Data | Where-Object { $_.Name -match 'CallerComputerName|WorkstationName|Workstation' }).'#text'
                            $reason = switch ($e.Id) {
                                4740 { "Account Lockout" }
                                4625 { "Failed Logon" }
                                4771 { "Kerberos Pre-Auth Failed" }
                                4776 { "NTLM Failure" }
                                default { "Unknown" }
                            }

                            $output.Events += [pscustomobject]@{
                                DC = $dc.Name
                                Caller = $caller
                                Time = $e.TimeCreated
                                EventID = $e.Id
                                Reason = $reason
                            }
                        }
                    }
                } catch {
                    $status = "Error: $($_.Exception.Message.Split("`n")[0])"
                }

                $output.DCs += [pscustomobject]@{Name=$dc.Name;Status=$status}
            }
        } catch {
            $output.DCs += [pscustomobject]@{Name='Forest Error';Status="$_"}
        }

        return $output
    } -ArgumentList $user, $domain, $from, $to, $ids | Register-ObjectEvent -EventName StateChanged -Action {
        $job = $event.Sender
        if ($job.State -eq 'Completed') {
            $result = Receive-Job -Job $job
            Remove-Job $job

            $progress.Style = 'Blocks'
            $progress.Value = 100

            $result.DCs | ForEach-Object {
                $item = New-Object System.Windows.Forms.ListViewItem($_.Name)
                $item.SubItems.Add($_.Status)
                if ($_.Status -like 'Error*') { $item.BackColor = 'LightPink' }
                elseif ($_.Status -eq 'Success') { $item.BackColor = 'LightGreen' }
                $lvDC.Items.Add($item)
            }

            $global:Results = $result.Events

            $result.Events | ForEach-Object {
                $item = New-Object System.Windows.Forms.ListViewItem($_.DC)
                $item.SubItems.Add($_.Caller)
                $item.SubItems.Add($_.Time.ToString("g"))
                $item.SubItems.Add($_.EventID.ToString())
                $item.SubItems.Add($_.Reason)
                $lvResults.Items.Add($item)
            }

            $btnRun.Enabled = $true
            $btnExport.Enabled = ($global:Results.Count -gt 0)
        }
    }
})

# Export results
$btnExport.Add_Click({
    $save = New-Object System.Windows.Forms.SaveFileDialog
    $save.Filter = "CSV files (*.csv)|*.csv"
    $save.FileName = "LockoutTrace_$(Get-Date -Format yyyyMMdd_HHmmss).csv"
    if ($save.ShowDialog() -eq 'OK') {
        $global:Results | Export-Csv -Path $save.FileName -NoTypeInformation
        [System.Windows.Forms.MessageBox]::Show("Exported to $($save.FileName)", "Export Successful")
    }
})

[System.Windows.Forms.Application]::EnableVisualStyles()
[System.Windows.Forms.Application]::Run($form)

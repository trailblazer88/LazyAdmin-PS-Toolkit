Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
using namespace System.Windows.Forms
using namespace System.Drawing

# Create the form
$form = New-Object Form
$form.Text = "AD Lockout & Bad Password Tracer"
$form.Size = New-Object Size(1050, 720)
$form.StartPosition = "CenterScreen"
$form.Font = New-Object Font("Segoe UI", 10)
$form.BackColor = [Color]::White

# Username
$lblUser = New-Object Label
$lblUser.Text = "Username:"
$lblUser.Location = New-Object Point(20, 20)
$form.Controls.Add($lblUser)

$txtUser = New-Object TextBox
$txtUser.Location = New-Object Point(100, 18)
$txtUser.Size = New-Object Size(180, 25)
$form.Controls.Add($txtUser)

# Domain
$lblDomain = New-Object Label
$lblDomain.Text = "Domain:"
$lblDomain.Location = New-Object Point(300, 20)
$form.Controls.Add($lblDomain)

$cmbDomain = New-Object ComboBox
$cmbDomain.Location = New-Object Point(360, 18)
$cmbDomain.Size = New-Object Size(200, 25)
$cmbDomain.DropDownStyle = 'DropDownList'
$form.Controls.Add($cmbDomain)

# Dates
$lblFrom = New-Object Label
$lblFrom.Text = "From:"
$lblFrom.Location = New-Object Point(580, 20)
$form.Controls.Add($lblFrom)

$dtpFrom = New-Object DateTimePicker
$dtpFrom.Location = New-Object Point(620, 18)
$dtpFrom.Value = (Get-Date).AddDays(-1)
$form.Controls.Add($dtpFrom)

$lblTo = New-Object Label
$lblTo.Text = "To:"
$lblTo.Location = New-Object Point(760, 20)
$form.Controls.Add($lblTo)

$dtpTo = New-Object DateTimePicker
$dtpTo.Location = New-Object Point(790, 18)
$dtpTo.Value = Get-Date
$form.Controls.Add($dtpTo)

# Run Button
$btnRun = New-Object Button
$btnRun.Text = "Run Trace"
$btnRun.Location = New-Object Point(920, 16)
$btnRun.Size = New-Object Size(100, 30)
$form.Controls.Add($btnRun)

# Progress Bar
$progress = New-Object ProgressBar
$progress.Location = New-Object Point(20, 60)
$progress.Size = New-Object Size(1000, 20)
$form.Controls.Add($progress)

# Status Bar
$statusBar = New-Object StatusStrip
$statusLabel = New-Object ToolStripStatusLabel
$statusLabel.Text = "Ready"
$statusBar.Items.Add($statusLabel)
$form.Controls.Add($statusBar)

# DC ListView
$lvDC = New-Object ListView
$lvDC.View = 'Details'
$lvDC.FullRowSelect = $true
$lvDC.GridLines = $true
$lvDC.Size = New-Object Size(480, 250)
$lvDC.Location = New-Object Point(20, 90)
$lvDC.Columns.Add("DC", 200) | Out-Null
$lvDC.Columns.Add("Status", 260) | Out-Null
$form.Controls.Add($lvDC)

# Event ListView
$lvEvt = New-Object ListView
$lvEvt.View = 'Details'
$lvEvt.FullRowSelect = $true
$lvEvt.GridLines = $true
$lvEvt.Size = New-Object Size(480, 550)
$lvEvt.Location = New-Object Point(520, 90)
"DC","Caller","Time","EventID","Reason" | ForEach-Object { $lvEvt.Columns.Add($_,90) | Out-Null }
$form.Controls.Add($lvEvt)

# Export Button
$btnExport = New-Object Button
$btnExport.Text = "Export CSV"
$btnExport.Location = New-Object Point(20, 350)
$btnExport.Size = New-Object Size(100, 30)
$btnExport.Enabled = $false
$form.Controls.Add($btnExport)

# Load domains
try {
    [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains.Name | ForEach-Object {
        $cmbDomain.Items.Add($_) | Out-Null
    }
    $cmbDomain.SelectedIndex = 0
} catch {
    [MessageBox]::Show("Error loading domain list: $_")
}

$global:Results = @()

# Async Runspace logic
$btnRun.Add_Click({
    $user = $txtUser.Text.Trim()
    $domain = $cmbDomain.SelectedItem
    $from = $dtpFrom.Value
    $to = $dtpTo.Value
    $eventIds = 4740,4625,4771,4776

    if (-not $user) { [MessageBox]::Show("Please enter a username."); return }
    if (-not $domain) { [MessageBox]::Show("Please select a domain."); return }
    if ($from -gt $to) { [MessageBox]::Show("'From' date must be before 'To'"); return }

    $btnRun.Enabled = $false
    $btnExport.Enabled = $false
    $lvDC.Items.Clear()
    $lvEvt.Items.Clear()
    $progress.Value = 0
    $statusLabel.Text = "Starting..."

    $global:Results = @()
    $scriptBlock = {
        param($user, $domain, $from, $to, $eventIds)

        $results = @()
        $statuses = @()

        $dcs = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains |
               Where-Object Name -ieq $domain |
               ForEach-Object { $_.DomainControllers }

        $i = 0
        $total = $dcs.Count

        foreach ($dc in $dcs) {
            $i++
            $percent = [math]::Round(($i / $total) * 100)
            [System.Windows.Forms.Application]::DoEvents()
            $statusLabel.Text = "Querying $($dc.Name)..."

            $status = "Success"
            try {
                $logs = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                    LogName='Security'; ID=$eventIds; StartTime=$from; EndTime=$to
                } -ErrorAction Stop

                foreach ($log in $logs) {
                    $xml = [xml]$log.ToXml()
                    $target = ($xml.Event.EventData.Data | Where-Object Name -eq "TargetUserName").'#text'
                    if ($target -ieq $user) {
                        $caller = ($xml.Event.EventData.Data | Where-Object Name -match "CallerComputerName|WorkstationName|Workstation").'#text'
                        $reason = switch ($log.Id) {
                            4740 { 'Lockout' }
                            4625 { 'Failed Logon' }
                            4771 { 'Kerberos Fail' }
                            4776 { 'NTLM Fail' }
                            default { 'Other' }
                        }

                        $results += [pscustomobject]@{
                            DC = $dc.Name
                            Caller = $caller
                            Time = $log.TimeCreated
                            EventID = $log.Id
                            Reason = $reason
                        }
                    }
                }
            } catch {
                $status = "Error: $($_.Exception.Message -split '`n')[0]"
            }

            $statuses += [pscustomobject]@{ DC = $dc.Name; Status = $status }
            $progress.Value = $percent
        }

        return @{ Results = $results; Statuses = $statuses }
    }

    $powershell = [powershell]::Create().AddScript($scriptBlock).AddArgument($user).AddArgument($domain).AddArgument($from).AddArgument($to).AddArgument($eventIds)
    $powershell.RunspacePool = [RunspaceFactory]::CreateRunspacePool(1, [Environment]::ProcessorCount)
    $powershell.RunspacePool.Open()

    $asyncResult = $powershell.BeginInvoke()

    while (-not $asyncResult.IsCompleted) {
        Start-Sleep -Milliseconds 200
        [System.Windows.Forms.Application]::DoEvents()
    }

    $output = $powershell.EndInvoke($asyncResult)
    $powershell.Dispose()

    # Load results into UI
    foreach ($dc in $output.Statuses) {
        $item = New-Object ListViewItem($dc.DC)
        $item.SubItems.Add($dc.Status)
        if ($dc.Status -like "Error*") { $item.BackColor = "LightSalmon" }
        elseif ($dc.Status -eq "Success") { $item.BackColor = "LightGreen" }
        $lvDC.Items.Add($item)
    }

    foreach ($evt in $output.Results) {
        $item = New-Object ListViewItem($evt.DC)
        $item.SubItems.AddRange(@($evt.Caller, $evt.Time.ToString("g"), $evt.EventID,

Add-Type -AssemblyName System.Windows.Forms, System.Drawing, System.Management.Automation

# ---------- GUI Setup ----------
$form = New-Object System.Windows.Forms.Form
$form.Text = "AD Lockout & Login Failure Tracer"
$form.Size = New-Object Drawing.Size(1040,750)
$form.StartPosition = 'CenterScreen'

# Username
$lblUser = New-Object Drawing.Label -Property @{ Text='Username:'; Location = '20,20'; Size='80,20' }
$form.Controls.Add($lblUser)
$txtUser = New-Object Drawing.TextBox -Property @{ Location='110,18'; Size='200,20' }
$form.Controls.Add($txtUser)

# Domain selector
$lblDomain = New-Object Drawing.Label -Property @{ Text='Domain:'; Location='330,20'; Size='60,20' }
$form.Controls.Add($lblDomain)
$cmbDomain = New-Object Drawing.ComboBox -Property @{
    Location='400,18'; Size='200,20'; DropDownStyle='DropDownList'
}
$form.Controls.Add($cmbDomain)

# Date range
$lblFrom = New-Object Drawing.Label -Property @{ Text='From:'; Location='620,20'; Size='40,20' }
$form.Controls.Add($lblFrom)
$dtpFrom = New-Object Windows.Forms.DateTimePicker -Property @{ Location='665,18'; Size='120,20'; Value=(Get-Date).AddDays(-1) }
$form.Controls.Add($dtpFrom)
$lblTo = New-Object Drawing.Label -Property @{ Text='To:'; Location='800,20'; Size='30,20' }
$form.Controls.Add($lblTo)
$dtpTo = New-Object Windows.Forms.DateTimePicker -Property @{ Location='835,18'; Size='120,20'; Value=Get-Date }
$form.Controls.Add($dtpTo)

# Run trace
$btnRun = New-Object Windows.Forms.Button -Property @{ Text='Run Trace'; Location='975,16'; Size='90,25' }
$form.Controls.Add($btnRun)

# Progress bar
$prg = New-Object Windows.Forms.ProgressBar -Property @{ Location='20,55'; Size='1040,20' }
$form.Controls.Add($prg)

# DC status ListView
$lvDC = New-Object Windows.Forms.ListView -Property @{
    View='Details'; GridLines=$true; FullRowSelect=$true; Location='20,85'; Size='500,250'
}
$lvDC.Columns.Add('Domain Controller',200)
$lvDC.Columns.Add('Status',280)
$form.Controls.Add($lvDC)

# Events ListView
$lvEvent = New-Object Windows.Forms.ListView -Property @{
    View='Details'; GridLines=$true; FullRowSelect=$true; Location='540,85'; Size='520,550'
}
'DC','Caller','Time','EventID','Reason' | ForEach-Object { $lvEvent.Columns.Add($_,100) }
$form.Controls.Add($lvEvent)

# Export CSV
$btnExport = New-Object Windows.Forms.Button -Property @{ Text='Export CSV'; Location='20,345'; Size='100,25'; Enabled=$false }
$form.Controls.Add($btnExport)

# Credits
$lblCred = New-Object Drawing.Label -Property @{ Text='Created by D.Mudh'; Location='880,15'; Size='140,20'; ForeColor='Gray'; Font = New-Object Drawing.Font('italic',8) }
$form.Controls.Add($lblCred)

# Populate domain list
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains.Name | ForEach-Object { $cmbDomain.Items.Add($_) }
$cmbDomain.SelectedIndex = 0

# Store last results
$global:Results = @()

# ---------- Trace Function ----------
function Invoke-Tracer {
    param($user,$domain,$from,$to)
    $ids = 4740,4625,4771,4776
    $forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $dom = $forest.Domains | Where-Object { $_.Name -ieq $domain }
    $dcs = $dom.DomainControllers
    $count=0; $total=$dcs.Count

    $global:Results = @()
    $lvDC.Items.Clear()
    $lvEvent.Items.Clear()

    foreach($dc in $dcs) {
        $count++; $pct = [int](($count/$total)*100)
        $prg.Value = $pct
        try {
            $evts = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                Logname='Security'; ID=$ids; StartTime=$from; EndTime=$to
            } -EA Stop
            $status = 'Success'
            foreach($e in $evts) {
                $x=[xml]$e.ToXml()
                $u = ($x.Event.EventData.Data | Where Name -eq 'TargetUserName').'#text'
                if($u -and $u -ieq $user) {
                    $global:Results += [pscustomobject]@{
                        DomainController = $dc.Name
                        Caller = (($x.Event.EventData.Data | Where Name -eq 'CallerComputerName'),'#text')
                        Time = $e.TimeCreated
                        EventID = $e.Id
                        Reason = switch($e.Id){
                            4740 {'Account Lockout'}
                            4625 {"Failed Logon (4625) - Status "+(($x.Event.EventData.Data|Where Name -eq 'Status').'#text')}
                            4771 {"Kerberos failure"}
                            4776 {"NTLM failure"}
                            default {$''}
                        }
                    }
                }
            }
        } catch {
            $status = "Failed: $($_.Exception.Message.Split('`n')[0])"
        }
        $item=New-Object Windows.Forms.ListViewItem($dc.Name)
        $item.SubItems.Add($status)
        if($status -like 'Failed*'){$item.BackColor='LightPink'} elseif($status -eq 'Success'){$item.BackColor='LightGreen'}
        $lvDC.Items.Add($item)
    }

    $prg.Value=100
    foreach($r in $global:Results) {
        $item=New-Object Windows.Forms.ListViewItem($r.DomainController)
        $item.SubItems.Add($r.Caller)
        $item.SubItems.Add($r.Time.ToString('g'))
        $item.SubItems.Add($r.EventID)
        $item.SubItems.Add($r.Reason)
        $lvEvent.Items.Add($item)
    }

    $btnExport.Enabled = $global:Results.Count -gt 0
}

# ---------- Button Actions ----------
$btnRun.Add_Click({
    $btnRun.Enabled=$false
    $clr=[ScriptBlock]::Create("Invoke-Tracer '$($txtUser.Text)' '$($cmbDomain.Text)' '$($dtpFrom.Value)' '$($dtpTo.Value)'")
    $job = [PowerShell]::Create().AddScript($clr)
    $async = $job.BeginInvoke()
    while(-not $async.IsCompleted) { [System.Windows.Forms.Application]::DoEvents() }
    $btnRun.Enabled = $true
})

$btnExport.Add_Click({
    $csv = $global:Results | Export-Csv -NoTypeInformation -Path ("LockoutTrace_{0:yyyyMMddHHmm}.csv" -f (Get-Date)) -Force
    [System.Windows.Forms.MessageBox]::Show("Exported to $csv")
})

# ---------- Show the GUI ----------
[System.Windows.Forms.Application]::EnableVisualStyles()
$form.Add_Shown({ }) | Out-Null
[System.Windows.Forms.Application]::Run($form)

using namespace System.Windows.Forms
using namespace System.Drawing
using namespace System.Timers

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# -- Create Form --
$form = New-Object Form
$form.Text = "AD Lockout & Bad Password Tracer"
$form.Size = New-Object Size(1050, 720)
$form.StartPosition = "CenterScreen"
$form.Font = New-Object Font("Segoe UI", 10)
$form.BackColor = [Color]::White

# -- Controls --

# Username label and textbox
$lblUser = New-Object Label
$lblUser.Text = "Username:"
$lblUser.Location = New-Object Point(20, 20)
$form.Controls.Add($lblUser)

$txtUser = New-Object TextBox
$txtUser.Location = New-Object Point(100, 18)
$txtUser.Size = New-Object Size(180, 25)
$form.Controls.Add($txtUser)

# Domain label and combobox
$lblDomain = New-Object Label
$lblDomain.Text = "Domain:"
$lblDomain.Location = New-Object Point(300, 20)
$form.Controls.Add($lblDomain)

$cmbDomain = New-Object ComboBox
$cmbDomain.Location = New-Object Point(360, 18)
$cmbDomain.Size = New-Object Size(200, 25)
$cmbDomain.DropDownStyle = 'DropDownList'
$form.Controls.Add($cmbDomain)

# From date label and picker
$lblFrom = New-Object Label
$lblFrom.Text = "From:"
$lblFrom.Location = New-Object Point(580, 20)
$form.Controls.Add($lblFrom)

$dtpFrom = New-Object DateTimePicker
$dtpFrom.Location = New-Object Point(620, 18)
$dtpFrom.Value = (Get-Date).AddDays(-1)
$form.Controls.Add($dtpFrom)

# To date label and picker
$lblTo = New-Object Label
$lblTo.Text = "To:"
$lblTo.Location = New-Object Point(760, 20)
$form.Controls.Add($lblTo)

$dtpTo = New-Object DateTimePicker
$dtpTo.Location = New-Object Point(790, 18)
$dtpTo.Value = Get-Date
$form.Controls.Add($dtpTo)

# Run button
$btnRun = New-Object Button
$btnRun.Text = "Run Trace"
$btnRun.Location = New-Object Point(920, 16)
$btnRun.Size = New-Object Size(100, 30)
$form.Controls.Add($btnRun)

# Progress bar
$progress = New-Object ProgressBar
$progress.Location = New-Object Point(20, 60)
$progress.Size = New-Object Size(1000, 20)
$form.Controls.Add($progress)

# Status bar with status label
$statusBar = New-Object StatusStrip
$statusLabel = New-Object ToolStripStatusLabel
$statusLabel.Text = "Ready"
$statusBar.Items.Add($statusLabel)
$form.Controls.Add($statusBar)

# DC ListView
$lvDC = New-Object ListView
$lvDC.View = 'Details'
$lvDC.FullRowSelect = $true
$lvDC.GridLines = $true
$lvDC.Size = New-Object Size(480, 250)
$lvDC.Location = New-Object Point(20, 90)
$lvDC.Columns.Add("Domain Controller", 200) | Out-Null
$lvDC.Columns.Add("Status", 260) | Out-Null
$form.Controls.Add($lvDC)

# Event ListView
$lvEvt = New-Object ListView
$lvEvt.View = 'Details'
$lvEvt.FullRowSelect = $true
$lvEvt.GridLines = $true
$lvEvt.Size = New-Object Size(480, 550)
$lvEvt.Location = New-Object Point(520, 90)
"DC","Caller","Time","EventID","Reason" | ForEach-Object { $lvEvt.Columns.Add($_,90) | Out-Null }
$form.Controls.Add($lvEvt)

# Export CSV button
$btnExport = New-Object Button
$btnExport.Text = "Export CSV"
$btnExport.Location = New-Object Point(20, 350)
$btnExport.Size = New-Object Size(100, 30)
$btnExport.Enabled = $false
$form.Controls.Add($btnExport)

# -- Populate domain list --
try {
    $forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    foreach ($domain in $forest.Domains) {
        $cmbDomain.Items.Add($domain.Name) | Out-Null
    }
    if ($cmbDomain.Items.Count -gt 0) { $cmbDomain.SelectedIndex = 0 }
} catch {
    [MessageBox]::Show("Error loading domain list:`n$($_.Exception.Message)")
}

# -- Runspace pool for async operations --
$runspacePool = [runspacefactory]::CreateRunspacePool(1, [environment]::ProcessorCount)
$runspacePool.Open()

function Invoke-LockoutQueryAsync {
    param($user, $domain, $from, $to, $eventIds)

    $ps = [powershell]::Create()
    $ps.RunspacePool = $runspacePool

    $scriptBlock = {
        param($user, $domain, $from, $to, $eventIds)

        $results = @()
        $statuses = @()

        try {
            $forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
            $targetDomain = $forest.Domains | Where-Object { $_.Name -ieq $domain }
            if (-not $targetDomain) {
                throw "Domain '$domain' not found in forest."
            }

            $dcs = $targetDomain.DomainControllers
            foreach ($dc in $dcs) {
                $status = "Success"
                try {
                    $logs = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                        LogName='Security'; ID=$eventIds; StartTime=$from; EndTime=$to
                    } -ErrorAction Stop

                    foreach ($log in $logs) {
                        $xml = [xml]$log.ToXml()
                        $target = ($xml.Event.EventData.Data | Where-Object Name -eq "TargetUserName").'#text'
                        if ($target -ieq $user) {
                            $caller = ($xml.Event.EventData.Data | Where-Object Name -match "CallerComputerName|WorkstationName|Workstation").'#text'
                            $reason = switch ($log.Id) {
                                4740 { 'Lockout' }
                                4625 { 'Failed Logon' }
                                4771 { 'Kerberos Fail' }
                                4776 { 'NTLM Fail' }
                                default { 'Other' }
                            }
                            $results += [pscustomobject]@{
                                DC = $dc.Name
                                Caller = $caller
                                Time = $log.TimeCreated
                                EventID = $log.Id
                                Reason = $reason
                            }
                        }
                    }
                } catch {
                    $status = "Error: $($_.Exception.Message -split '\n')[0]"
                }
                $statuses += [pscustomobject]@{ DC = $dc.Name; Status = $status }
            }

            return @{ Results = $results; Statuses = $statuses }
        }
        catch {
            return @{ Results = @(); Statuses = @([pscustomobject]@{ DC = 'N/A'; Status = $_.Exception.Message }) }
        }
    }

    $ps.AddScript($scriptBlock).AddArgument($user).AddArgument($domain).AddArgument($from).AddArgument($to).AddArgument($eventIds) | Out-Null

    $asyncResult = $ps.BeginInvoke()

    return @{ PowerShell = $ps; AsyncResult = $asyncResult }
}

# -- Run Button click handler --
$btnRun.Add_Click({
    $user = $txtUser.Text.Trim()
    $domain = $cmbDomain.SelectedItem
    $from = $dtpFrom.Value
    $to = $dtpTo.Value
    $eventIds = 4740,4625,4771,4776

    if (-not $user) { [MessageBox]::Show("Please enter a username."); return }
    if (-not $domain) { [MessageBox]::Show("Please select a domain."); return }
    if ($from -gt $to) { [MessageBox]::Show("'From' date must be before 'To'"); return }

    $btnRun.Enabled = $false
    $btnExport.Enabled = $false
    $lvDC.Items.Clear()
    $lvEvt.Items.Clear()
    $progress.Style = 'Marquee'
    $statusLabel.Text = "Running..."

    $job = Invoke-LockoutQueryAsync -user $user -domain $domain -from $from -to $to -eventIds $eventIds

    # Timer to poll for completion
    $timer = New-Object Timers.Timer
    $timer.Interval = 500
    $timer.AutoReset = $true
    $timer.Enabled = $true

    $timer.Add_Elapsed({
        if ($job.AsyncResult.IsCompleted) {
            $timer.Stop()
            $timer.Dispose()
            $progress.Style = 'Blocks'

            $output = $job.PowerShell.EndInvoke($job.AsyncResult)
            $job.PowerShell.Dispose()

            # Update UI on GUI thread
            $form.Invoke([action]{
                foreach ($dc in $output.Statuses) {
                    $item = New-Object ListViewItem($dc.DC)
                    $item.SubItems.Add($dc.Status)
                    if ($dc.Status -like "Error*") { $item.BackColor = "LightSalmon" }
                    elseif ($dc.Status -eq "Success") { $item.BackColor = "LightGreen" }
                    $lvDC.Items.Add($item)
                }

                foreach ($evt in $output.Results) {
                    $item = New-Object ListViewItem($evt.DC)
                    $item.SubItems.AddRange(@($evt.Caller, $evt.Time.ToString("g"), $evt.EventID, $evt.Reason))
                    $lvEvt.Items.Add($item)
                }

                $statusLabel.Text = "Completed."
                $btnRun.Enabled = $true
                $btnExport.Enabled = $lvEvt.Items.Count -gt 0
            })
        }
    })
})

# -- Export CSV button --
$btnExport.Add_Click({
    if ($lvEvt.Items.Count -eq 0) {
        [MessageBox]::Show("No events to export.")
        return
    }
    $dlg = New-Object SaveFileDialog
    $dlg.Filter = "CSV Files|*.csv"
    $dlg.FileName = "LockoutEvents.csv"
    if ($dlg.ShowDialog() -eq [DialogResult]::OK) {
        $lines = @()
        $header = "DC,Caller,Time,EventID,Reason"
        $lines += $header
        foreach ($item in $lvEvt.Items) {
            $line = ($item.SubItems | ForEach-Object { $_.Text }) -join ","
            $lines += $line
        }
        $lines | Out-File -FilePath $dlg.FileName -Encoding UTF8
        [MessageBox]::Show("Exported to $($dlg.FileName)")
    }
})

# -- Show Form --
[void]$form.ShowDialog()

# Cleanup runspace pool on exit
$runspacePool.Close()
$runspacePool.Dispose()

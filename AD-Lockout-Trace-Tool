Add-Type -AssemblyName System.Windows.Forms, System.Drawing

# Build Form
$form = New-Object System.Windows.Forms.Form
$form.Text = "AD Lockout & Logon Tracer"
$form.Size = New-Object System.Drawing.Size(1040, 740)
$form.StartPosition = "CenterScreen"
$form.BackColor = [Color]::White
$form.Font = New-Object Font("Segoe UI",10)

# Helper funcs
function Add-Control($type, $props) {
    $ctrl = New-Object $type
    foreach ($k in $props.Keys) { $ctrl.$k = $props[$k] }
    $form.Controls.Add($ctrl)
    return $ctrl
}

# Create controls
$lblUser = Add-Control "System.Windows.Forms.Label" @{Text="Username:"; Location = New-Object Point(20,20); AutoSize = $true}
$txtUser = Add-Control "System.Windows.Forms.TextBox" @{Location = New-Object Point(100,18); Size = New-Object Size(180,25)}

$lblDomain = Add-Control "System.Windows.Forms.Label" @{Text="Domain:"; Location = New-Object Point(300,20); AutoSize = $true}
$cmbDomain = Add-Control "System.Windows.Forms.ComboBox" @{Location = New-Object Point(360,18); Size = New-Object Size(200,25); DropDownStyle = 'DropDownList'}

$lblFrom = Add-Control "System.Windows.Forms.Label" @{Text="From:"; Location = New-Object Point(580,20); AutoSize = $true}
$dtpFrom = Add-Control "System.Windows.Forms.DateTimePicker" @{Location = New-Object Point(620,18); Size = New-Object Size(120,25); Value = (Get-Date).AddDays(-1)}

$lblTo = Add-Control "System.Windows.Forms.Label" @{Text="To:"; Location = New-Object Point(760,20); AutoSize = $true}
$dtpTo = Add-Control "System.Windows.Forms.DateTimePicker" @{Location = New-Object Point(790,18); Size = New-Object Size(120,25); Value = Get-Date}

$btnRun = Add-Control "System.Windows.Forms.Button" @{Text="Run Trace"; Location = New-Object Point(920,16); Size = New-Object Size(100,30); FlatStyle='Flat'}
$progress = Add-Control "System.Windows.Forms.ProgressBar" @{Location = New-Object Point(20,60); Size = New-Object Size(1000,20); Style='Blocks'}

$lvDC = Add-Control "System.Windows.Forms.ListView" @{
    Location = New-Object Point(20,90); Size = New-Object Size(480,250)
    View='Details'; FullRowSelect=$true; GridLines=$true
}
$lvDC.Columns.Add("DC",200)|Out-Null
$lvDC.Columns.Add("Status",260)|Out-Null

$lvEvt = Add-Control "System.Windows.Forms.ListView" @{
    Location = New-Object Point(520,90); Size = New-Object Size(480,550)
    View='Details'; FullRowSelect=$true; GridLines=$true
}
"DC","Caller","Time","EventID","Reason" | ForEach-Object { $lvEvt.Columns.Add($_,90)|Out-Null }

$btnExport = Add-Control "System.Windows.Forms.Button" @{Text="Export CSV"; Location = New-Object Point(20,350); Size = New-Object Size(100,30); FlatStyle='Flat'; Enabled=$false}

# Populate domains
try {
    [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains.Name | ForEach-Object { $cmbDomain.Items.Add($_)|Out-Null }
    if ($cmbDomain.Items.Count -gt 0) { $cmbDomain.SelectedIndex = 0 }
} catch {
    [System.Windows.Forms.MessageBox]::Show("Error loading domains: $_")
}

# Global store
$global:Results = @()

# Main trace logic
$btnRun.Add_Click({
    $user = $txtUser.Text.Trim()
    $domain = $cmbDomain.SelectedItem
    $from = $dtpFrom.Value
    $to = $dtpTo.Value
    $ids = 4740,4625,4771,4776

    if (-not $user) { [System.Windows.Forms.MessageBox]::Show("Enter username"); return }
    if (-not $domain) { [System.Windows.Forms.MessageBox]::Show("Select domain"); return }
    if ($from -gt $to) { [System.Windows.Forms.MessageBox]::Show("'From' must be before 'To'"); return }

    $btnRun.Enabled = $false; $btnExport.Enabled = $false
    $lvDC.Items.Clear(); $lvEvt.Items.Clear()
    $progress.Value = 0

    $dcs = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains |
           Where-Object Name -ieq $domain |
           ForEach-Object { $_.DomainControllers }
    $total = $dcs.Count; $i=0
    $global:Results=@()

    foreach ($dc in $dcs) {
        $i++
        $progress.Value = [int](($i/$total)*100)
        [System.Windows.Forms.Application]::DoEvents()

        $status="Success"
        try {
            $logs = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                LogName='Security'; ID=$ids; StartTime=$from; EndTime=$to
            } -ErrorAction Stop

            foreach ($e in $logs) {
                $x = [xml]$e.ToXml()
                $t = ($x.Event.EventData.Data | Where Name -eq 'TargetUserName').'#text'
                if ($t -ieq $user) {
                    $caller = ($x.Event.EventData.Data | Where Name -match 'CallerComputerName|WorkstationName|Workstation').'#text'
                    $reason = switch ($e.Id) {
                        4740 {'Lockout'};4625{'Failed Logon'};4771{'Kerberos Fail'};4776{'NTLM Fail'};default{'Other'}
                    }
                    $global:Results += [pscustomobject]@{
                        DC=$dc.Name; Caller=$caller; Time=$e.TimeCreated; EventID=$e.Id; Reason=$reason
                    }
                }
            }
        } catch {
            $status = "Error: $($_.Exception.Message -split '`n')[0]"
        }

        $item = New-Object System.Windows.Forms.ListViewItem($dc.Name)
        $item.SubItems.Add($status)
        if ($status -like 'Error*') { $item.BackColor = 'LightSalmon' }
        elseif ($status -eq 'Success') { $item.BackColor = 'LightGreen' }
        $lvDC.Items.Add($item)
    }

    foreach ($r in $global:Results) {
        $it = New-Object System.Windows.Forms.ListViewItem($r.DC)
        $it.SubItems.AddRange(@($r.Caller, $r.Time.ToString('g'), $r.EventID, $r.Reason))
        $lvEvt.Items.Add($it)
    }

    $progress.Value = 100
    $btnRun.Enabled = $true
    $btnExport.Enabled = ($global:Results.Count -gt 0)
})

# Export logic
$btnExport.Add_Click({
    $sf = New-Object System.Windows.Forms.SaveFileDialog
    $sf.Filter="CSV (*.csv)|*.csv"; $sf.FileName="LockoutTrace_$(Get-Date -f yyyyMMdd_HHmmss).csv"
    if ($sf.ShowDialog() -eq 'OK') {
        $global:Results | Export-Csv -Path $sf.FileName -NoTypeInformation
        [System.Windows.Forms.MessageBox]::Show("Saved: $($sf.FileName)")
    }
})

[System.Windows.Forms.Application]::EnableVisualStyles()
[System.Windows.Forms.Application]::Run($form)

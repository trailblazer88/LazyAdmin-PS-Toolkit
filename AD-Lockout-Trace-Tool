Add-Type -AssemblyName System.Windows.Forms, System.Drawing, System.Management.Automation

# --- Form setup ---
$form = New-Object System.Windows.Forms.Form
$form.Text = "AD Lockout & Login Failure Tracer"
$form.Size = New-Object System.Drawing.Size(1040, 750)
$form.StartPosition = 'CenterScreen'
$form.BackColor = [System.Drawing.Color]::FromArgb(243, 243, 244) # Win11 light gray background
$form.Font = New-Object System.Drawing.Font("Segoe UI",10)

# Username label and textbox
$lblUser = New-Object System.Windows.Forms.Label
$lblUser.Text = 'Username:'
$lblUser.Location = New-Object System.Drawing.Point(20, 20)
$lblUser.Size = New-Object System.Drawing.Size(80, 25)
$form.Controls.Add($lblUser)

$txtUser = New-Object System.Windows.Forms.TextBox
$txtUser.Location = New-Object System.Drawing.Point(110, 20)
$txtUser.Size = New-Object System.Drawing.Size(200, 25)
$txtUser.Font = $form.Font
$form.Controls.Add($txtUser)

# Domain label and combobox
$lblDomain = New-Object System.Windows.Forms.Label
$lblDomain.Text = 'Domain:'
$lblDomain.Location = New-Object System.Drawing.Point(330, 20)
$lblDomain.Size = New-Object System.Drawing.Size(60, 25)
$form.Controls.Add($lblDomain)

$cmbDomain = New-Object System.Windows.Forms.ComboBox
$cmbDomain.Location = New-Object System.Drawing.Point(400, 20)
$cmbDomain.Size = New-Object System.Drawing.Size(200, 25)
$cmbDomain.DropDownStyle = 'DropDownList'
$cmbDomain.Font = $form.Font
$form.Controls.Add($cmbDomain)

# Date range labels and pickers
$lblFrom = New-Object System.Windows.Forms.Label
$lblFrom.Text = 'From:'
$lblFrom.Location = New-Object System.Drawing.Point(620, 20)
$lblFrom.Size = New-Object System.Drawing.Size(40, 25)
$form.Controls.Add($lblFrom)

$dtpFrom = New-Object System.Windows.Forms.DateTimePicker
$dtpFrom.Location = New-Object System.Drawing.Point(665, 20)
$dtpFrom.Size = New-Object System.Drawing.Size(120, 25)
$dtpFrom.Font = $form.Font
$dtpFrom.Value = (Get-Date).AddDays(-1)
$form.Controls.Add($dtpFrom)

$lblTo = New-Object System.Windows.Forms.Label
$lblTo.Text = 'To:'
$lblTo.Location = New-Object System.Drawing.Point(800, 20)
$lblTo.Size = New-Object System.Drawing.Size(30, 25)
$form.Controls.Add($lblTo)

$dtpTo = New-Object System.Windows.Forms.DateTimePicker
$dtpTo.Location = New-Object System.Drawing.Point(835, 20)
$dtpTo.Size = New-Object System.Drawing.Size(120, 25)
$dtpTo.Font = $form.Font
$dtpTo.Value = Get-Date
$form.Controls.Add($dtpTo)

# Run button
$btnRun = New-Object System.Windows.Forms.Button
$btnRun.Text = 'Run Trace'
$btnRun.Location = New-Object System.Drawing.Point(975, 18)
$btnRun.Size = New-Object System.Drawing.Size(90, 30)
$btnRun.Font = $form.Font
$form.Controls.Add($btnRun)

# Progress bar
$prg = New-Object System.Windows.Forms.ProgressBar
$prg.Location = New-Object System.Drawing.Point(20, 60)
$prg.Size = New-Object System.Drawing.Size(1040, 25)
$form.Controls.Add($prg)

# DC status listview
$lvDC = New-Object System.Windows.Forms.ListView
$lvDC.View = 'Details'
$lvDC.GridLines = $true
$lvDC.FullRowSelect = $true
$lvDC.Location = New-Object System.Drawing.Point(20, 95)
$lvDC.Size = New-Object System.Drawing.Size(500, 250)
$lvDC.Columns.Add('Domain Controller', 200) | Out-Null
$lvDC.Columns.Add('Status', 280) | Out-Null
$lvDC.Font = $form.Font
$form.Controls.Add($lvDC)

# Events listview
$lvEvent = New-Object System.Windows.Forms.ListView
$lvEvent.View = 'Details'
$lvEvent.GridLines = $true
$lvEvent.FullRowSelect = $true
$lvEvent.Location = New-Object System.Drawing.Point(540, 95)
$lvEvent.Size = New-Object System.Drawing.Size(520, 550)
$lvEvent.Columns.Add('DC', 100) | Out-Null
$lvEvent.Columns.Add('Caller', 100) | Out-Null
$lvEvent.Columns.Add('Time', 120) | Out-Null
$lvEvent.Columns.Add('EventID', 70) | Out-Null
$lvEvent.Columns.Add('Reason', 130) | Out-Null
$lvEvent.Font = $form.Font
$form.Controls.Add($lvEvent)

# Export button
$btnExport = New-Object System.Windows.Forms.Button
$btnExport.Text = 'Export CSV'
$btnExport.Location = New-Object System.Drawing.Point(20, 355)
$btnExport.Size = New-Object System.Drawing.Size(100, 30)
$btnExport.Font = $form.Font
$btnExport.Enabled = $false
$form.Controls.Add($btnExport)

# Credit label bottom-right
$lblCred = New-Object System.Windows.Forms.Label
$lblCred.Text = 'Created by D.Mudh'
$lblCred.AutoSize = $true
$lblCred.ForeColor = [System.Drawing.Color]::Gray
$lblCred.Font = New-Object System.Drawing.Font('Segoe UI',8,[System.Drawing.FontStyle]::Italic)
$lblCred.Location = New-Object System.Drawing.Point($form.ClientSize.Width - 140, $form.ClientSize.Height - 30)
$lblCred.Anchor = 'Bottom, Right'
$form.Controls.Add($lblCred)

# Populate domain combo box properly
try {
    $domains = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains.Name
    foreach ($d in $domains) { $cmbDomain.Items.Add($d) | Out-Null }
} catch {
    [System.Windows.Forms.MessageBox]::Show("Error retrieving domains: $_")
}

if ($cmbDomain.Items.Count -gt 0) { $cmbDomain.SelectedIndex = 0 }

# Global results store
$global:Results = @()

function Invoke-Tracer {
    param($user, $domain, $from, $to)

    $ids = 4740, 4625, 4771, 4776
    $forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
    $dom = $forest.Domains | Where-Object { $_.Name -ieq $domain }
    $dcs = $dom.DomainControllers
    $count = 0
    $total = $dcs.Count

    $global:Results = @()
    $lvDC.Items.Clear()
    $lvEvent.Items.Clear()
    $prg.Value = 0

    foreach ($dc in $dcs) {
        $count++
        $prg.Value = [int](($count / $total) * 100)
        [System.Windows.Forms.Application]::DoEvents()

        try {
            $evts = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                LogName = 'Security'
                ID = $ids
                StartTime = $from
                EndTime = $to
            } -ErrorAction Stop

            $status = 'Success'

            foreach ($e in $evts) {
                $x = [xml]$e.ToXml()
                $u = ($x.Event.EventData.Data | Where-Object { $_.Name -eq 'TargetUserName' }).'#text'

                if ($u -and $u -ieq $user) {
                    $caller = ($x.Event.EventData.Data | Where-Object { $_.Name -eq 'CallerComputerName' }).'#text'
                    if (-not $caller) {
                        $caller = ($x.Event.EventData.Data | Where-Object { $_.Name -in @('WorkstationName','Workstation') }).'#text'
                    }
                    $reason = switch ($e.Id) {
                        4740 { 'Account Lockout' }
                        4625 { "Failed Logon - Status " + (($x.Event.EventData.Data | Where-Object { $_.Name -eq 'Status' }).'#text') }
                        4771 { "Kerberos Pre-Auth Failure - Code " + (($x.Event.EventData.Data | Where-Object { $_.Name -eq 'FailureCode' }).'#text') }
                        4776 { "NTLM Failure - Status " + (($x.Event.EventData.Data | Where-Object { $_.Name -eq 'Status' }).'#text') }
                        default { '' }
                    }

                    $global:Results += [pscustomobject]@{
                        DomainController = $dc.Name
                        Caller = $caller
                        Time = $e.TimeCreated
                        EventID = $e.Id
                        Reason = $reason
                    }
                }
            }

        } catch {
            $status = "Failed: $($_.Exception.Message.Split("`n")[0])"
        }

        $item = New-Object System.Windows.Forms.ListViewItem($dc.Name)
        $item.SubItems.Add($status)
        if ($status -like 'Failed*') {
            $item.BackColor = [System.Drawing.Color]::LightPink
        } elseif ($status -eq 'Success') {
            $item.BackColor = [System.Drawing.Color]::LightGreen
        }
        $lvDC.Items.Add($item)
    }

    $prg.Value = 100
    foreach ($r in $global:Results) {
        $item = New-Object System.Windows.Forms.ListViewItem($r.DomainController)
        $item.SubItems.Add($r.Caller)
        $item.SubItems.Add($r.Time.ToString('g'))
        $item.SubItems.Add($r.EventID.ToString())
        $item.SubItems.Add($r.Reason)
        $lvEvent.Items.Add($item)
    }
}

# Function to run Invoke-Tracer asynchronously in runspace
function Start-AsyncTracer {
    param($user, $domain, $from, $to)

    # Disable UI controls during processing
    $btnRun.Enabled = $false
    $btnExport.Enabled = $false
    $prg.Value = 0
    $lvDC.Items.Clear()
    $lvEvent.Items.Clear()

    # Create a PowerShell runspace for async work
    $ps = [PowerShell]::Create()
    $ps.AddScript({
        param($u, $d, $f, $t)
        # Import necessary types inside runspace
        Import-Module ActiveDirectory -ErrorAction SilentlyContinue

        $ids = 4740, 4625, 4771, 4776
        $forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
        $dom = $forest.Domains | Where-Object { $_.Name -ieq $d }
        $dcs = $dom.DomainControllers

        $results = @()
        $dcResults = @()

        foreach ($dc in $dcs) {
            try {
                $evts = Get-WinEvent -ComputerName $dc.Name -FilterHashtable @{
                    LogName = 'Security'
                    ID = $ids
                    StartTime = $f
                    EndTime = $t
                } -ErrorAction Stop

                $status = 'Success'
                foreach ($e in $evts) {
                    $x = [xml]$e.ToXml()
                    $uName = ($x.Event.EventData.Data | Where-Object { $_.Name -eq 'TargetUserName' }).'#text'
                    if ($uName -and $uName -ieq $u) {
                        $caller = ($x.Event.EventData.Data | Where-Object { $_.Name -eq 'CallerComputerName' }).'#text'
                        if (-not $caller) {
                            $caller = ($x.Event.EventData.Data | Where-Object { $_.Name -in @('WorkstationName','Workstation') }).'#text'
                        }
                        $reason = switch ($e.Id) {
                            4740 { 'Account Lockout' }
                            4625 { "Failed Logon - Status " + (($x.Event.EventData.Data | Where-Object { $_.Name -eq 'Status' }).'#text') }
                            4771 { "Kerberos Pre-Auth Failure - Code " + (($x.Event.EventData.Data | Where-Object { $_.Name -eq 'FailureCode' }).'#text') }
                            4776 { "NTLM Failure - Status " + (($x.Event.EventData.Data | Where-Object { $_.Name -eq 'Status' }).'#text') }
                            default { '' }
                        }
                        $results += [pscustomobject]@{
                            DomainController = $dc.Name
                            Caller = $caller
                            Time = $e.TimeCreated
                            EventID = $e.Id
                            Reason = $reason
                        }
                    }
                }
            } catch {
                $status = "Failed: $($_.Exception.Message.Split("`n")[0])"
            }
            $dcResults += [pscustomobject]@{
                Name = $dc.Name
                Status = $status
            }
        }
        return @{Events=$results; DCStatus=$dcResults}
    }).AddArgument($user).AddArgument($domain).AddArgument($from).AddArgument($to)

    # Async callback
    $asyncResult = $ps.BeginInvoke()

    # Timer to check when done
    $timer = New-Object System.Windows.Forms.Timer
    $timer.Interval = 200
    $timer.Add_Tick({
        if ($asyncResult.IsCompleted) {
            $timer.Stop()
            $results = $ps.EndInvoke($asyncResult)
            $ps.Dispose()

            # Update UI on main thread
            $lvDC.Items.Clear()
            foreach ($dc in $results.DCStatus) {
                $item = New-Object System.Windows.Forms.ListViewItem($dc.Name)
                $item.SubItems.Add($dc.Status)
                if ($dc.Status -like 'Failed*') {
                    $item.BackColor = [System.Drawing.Color]::LightPink
                } elseif ($dc.Status -eq 'Success') {
                    $item.BackColor = [System.Drawing.Color]::LightGreen
                }
                $lvDC.Items.Add($item)
            }

            $lvEvent.Items.Clear()
            foreach ($e in $results.Events) {
                $item = New-Object System.Windows.Forms.ListViewItem($e.DomainController)
                $item.SubItems.Add($e.Caller)
                $item.SubItems.Add($e.Time.ToString('g'))
                $item.SubItems.Add($e.EventID.ToString())
                $item.SubItems.Add($e.Reason)
                $lvEvent.Items.Add($item)
            }

            $prg.Value = 100
            $btnRun.Enabled = $true
            $btnExport.Enabled = $lvEvent.Items.Count -gt 0
        } else {
            # Optional: animate progress bar or something
            $prg.Style = 'Marquee'
        }
    })
    $timer.Start()
}

# Run button click event - validate inputs and run async
$btnRun.Add_Click({
    if ([string]::IsNullOrWhiteSpace($txtUser.Text)) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a username.")
        return
    }
    if ($cmbDomain.SelectedItem -eq $null) {
        [System.Windows.Forms.MessageBox]::Show("Please select a domain.")
        return
    }
    if ($dtpFrom.Value -gt $dtpTo.Value) {
        [System.Windows.Forms.MessageBox]::Show("Start date must be before end date.")
        return
    }

    $prg.Style = 'Blocks'
    $prg.Value = 0
    Start-AsyncTracer -user $txtUser.Text.Trim() -domain $cmbDomain.SelectedItem -from $dtpFrom.Value -to $dtpTo.Value
})

# Export button click event
$btnExport.Add_Click({
    if ($global:Results.Count -eq 0) {
        [System.Windows.Forms.MessageBox]::Show("No data to export.")
        return
    }
    $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $saveFileDialog.Filter = "CSV Files (*.csv)|*.csv"
    $saveFileDialog.FileName = "ADLockoutTrace_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
    if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) {
        try {
            $global:Results | Export-Csv -Path $saveFileDialog.FileName -NoTypeInformation
            [System.Windows.Forms.MessageBox]::Show("Export successful.", "Export", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
        } catch {
            [System.Windows.Forms.MessageBox]::Show("Failed to export CSV.`n$_", "Export Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
        }
    }
})

[System.Windows.Forms.Application]::EnableVisualStyles()
[System.Windows.Forms.Application]::Run($form)

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# ========== GUI Layout ==========

$form = New-Object System.Windows.Forms.Form
$form.Text = "AD Lockout & Login Failure Tracer"
$form.Size = New-Object System.Drawing.Size(1024, 650)
$form.StartPosition = "CenterScreen"

# Username label and textbox
$labelUser = New-Object System.Windows.Forms.Label
$labelUser.Text = "Username:"
$labelUser.Location = New-Object System.Drawing.Point(20, 20)
$labelUser.Size = New-Object System.Drawing.Size(100, 20)
$form.Controls.Add($labelUser)

$textboxUser = New-Object System.Windows.Forms.TextBox
$textboxUser.Location = New-Object System.Drawing.Point(120, 18)
$textboxUser.Size = New-Object System.Drawing.Size(200, 20)
$form.Controls.Add($textboxUser)

# Domain dropdown
$labelDomain = New-Object System.Windows.Forms.Label
$labelDomain.Text = "Domain:"
$labelDomain.Location = New-Object System.Drawing.Point(340, 20)
$labelDomain.Size = New-Object System.Drawing.Size(60, 20)
$form.Controls.Add($labelDomain)

$domainDropdown = New-Object System.Windows.Forms.ComboBox
$domainDropdown.Location = New-Object System.Drawing.Point(410, 18)
$domainDropdown.Size = New-Object System.Drawing.Size(200, 20)
$domainDropdown.DropDownStyle = 'DropDownList'
$form.Controls.Add($domainDropdown)

# Run button
$runButton = New-Object System.Windows.Forms.Button
$runButton.Text = "Run Trace"
$runButton.Location = New-Object System.Drawing.Point(640, 16)
$runButton.Size = New-Object System.Drawing.Size(100, 25)
$form.Controls.Add($runButton)

# Progress bar
$progressBar = New-Object System.Windows.Forms.ProgressBar
$progressBar.Location = New-Object System.Drawing.Point(20, 50)
$progressBar.Size = New-Object System.Drawing.Size(960, 20)
$form.Controls.Add($progressBar)

# Event list view
$eventList = New-Object System.Windows.Forms.ListView
$eventList.View = 'Details'
$eventList.FullRowSelect = $true
$eventList.GridLines = $true
$eventList.Size = New-Object System.Drawing.Size(960, 300)
$eventList.Location = New-Object System.Drawing.Point(20, 80)
$eventList.Columns.Add("Domain Controller", 160)
$eventList.Columns.Add("Caller", 180)
$eventList.Columns.Add("Time", 180)
$eventList.Columns.Add("EventID", 60)
$eventList.Columns.Add("Reason", 360)
$form.Controls.Add($eventList)

# DC status view
$statusList = New-Object System.Windows.Forms.ListView
$statusList.View = 'Details'
$statusList.FullRowSelect = $true
$statusList.GridLines = $true
$statusList.Size = New-Object System.Drawing.Size(960, 160)
$statusList.Location = New-Object System.Drawing.Point(20, 390)
$statusList.Columns.Add("Domain Controller", 300)
$statusList.Columns.Add("Status", 640)
$form.Controls.Add($statusList)

# ========== Populate domain list ==========
$forest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
$forest.Domains | ForEach-Object { $domainDropdown.Items.Add($_.Name) }
$domainDropdown.SelectedIndex = 0

# ========== Helper function ==========
function Get-EventDetails {
    param (
        [System.Diagnostics.Eventing.Reader.EventRecord]$event
    )
    $data = [xml]$event.ToXml()
    $eventID = $event.Id
    $timestamp = $event.TimeCreated
    $dc = $event.MachineName

    $eventData = @{
        EventID          = $eventID
        DomainController = $dc
        Timestamp        = $timestamp
        CallerComputer   = ""
        Reason           = ""
    }

    switch ($eventID) {
        4740 {
            $eventData.CallerComputer = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "CallerComputerName" }).'#text'
            $eventData.Reason = "Account Lockout"
        }
        4625 {
            $eventData.CallerComputer = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "WorkstationName" }).'#text'
            $status = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "Status" }).'#text'
            $eventData.Reason = "Failed Logon - Status: $status"
        }
        4771 {
            $eventData.CallerComputer = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "WorkstationName" }).'#text'
            $code = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "FailureCode" }).'#text'
            $eventData.Reason = "Kerberos Pre-Auth Failed - Code: $code"
        }
        4776 {
            $eventData.CallerComputer = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "Workstation" }).'#text'
            $status = ($data.Event.EventData.Data | Where-Object { $_.Name -eq "Status" }).'#text'
            $eventData.Reason = "NTLM Auth Failed - Status: $status"
        }
    }

    return $eventData
}

# ========== Background Job Logic ==========

$runButton.Add_Click({
    $eventList.Items.Clear()
    $statusList.Items.Clear()
    $progressBar.Value = 0

    $username = $textboxUser.Text.Trim()
    $domainName = $domainDropdown.SelectedItem

    if (-not $username) {
        [System.Windows.Forms.MessageBox]::Show("Please enter a username.")
        return
    }

    $runButton.Enabled = $false

    $scriptBlock = {
        param ($username, $domainName)

        $results = @()
        $statusUpdates = @()
        $eventIDs = 4740, 4625, 4771, 4776

        $domain = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest().Domains | Where-Object { $_.Name -ieq $domainName }
        $dcs = $domain.DomainControllers
        $total = $dcs.Count
        $i = 0

        foreach ($dc in $dcs) {
            $dcName = $dc.Name
            try {
                $events = Get-WinEvent -ComputerName $dcName -FilterHashtable @{
                    LogName = 'Security'
                    ID = $eventIDs
                    StartTime = (Get-Date).AddDays(-1)
                } -ErrorAction Stop

                foreach ($event in $events) {
                    $xml = [xml]$event.ToXml()
                    $user = ($xml.Event.EventData.Data | Where-Object { $_.Name -eq "TargetUserName" }).'#text'
                    if ($user -and $user -ieq $username) {
                        $eventDetails = & $using:GetEventDetails $event
                        $results += $eventDetails
                    }
                }

                $statusUpdates += [PSCustomObject]@{ DC = $dcName; Status = "Success" }
            } catch {
                $statusUpdates += [PSCustomObject]@{ DC = $dcName; Status = "Failed: $_".Split("`n")[0] }
            }

            $i++
            [System.Threading.Thread]::Sleep(200)
            Write-Progress -Activity "Querying DCs" -Status "$dcName" -PercentComplete (($i / $total) * 100)
        }

        return @{ Events = $results; Status = $statusUpdates }
    }

    $job = Start-Job -ScriptBlock $scriptBlock -ArgumentList $username, $domainName

    Register-ObjectEvent -InputObject $job -EventName 'StateChanged' -Action {
        if ($Event.SourceEventArgs.JobStateInfo.State -eq 'Completed') {
            $result = Receive-Job $Event.Sender

            $form.Invoke({
                $progressBar.Value = 100
                $runButton.Enabled = $true

                foreach ($status in $result.Status) {
                    $item = New-Object System.Windows.Forms.ListViewItem($status.DC)
                    $item.SubItems.Add($status.Status)
                    $statusList.Items.Add($item)
                }

                foreach ($res in $result.Events) {
                    $item = New-Object System.Windows.Forms.ListViewItem($res.DomainController)
                    $item.SubItems.Add($res.CallerComputer)
                    $item.SubItems.Add($res.Timestamp.ToString("g"))
                    $item.SubItems.Add($res.EventID)
                    $item.SubItems.Add($res.Reason)
                    $eventList.Items.Add($item)
                }
            })
            Unregister-Event -SourceIdentifier $Event.SourceIdentifier
            Remove-Job $Event.Sender
        }
    }
})

# ========== Show GUI ==========
[void]$form.ShowDialog()
